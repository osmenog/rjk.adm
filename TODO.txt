TODO:
+ Разработать протокол API для следующих функций:
  + banlist.geturls - получение ссылок для заданного банлиста
+ Разработать механизм защиты для прокола API (контроль целостности, проверка авторизации при передачи API запроса)
* Добавить возможность удаления пользователей из банлиста при просмотре карточки банлиста [layout_getbanlist]
+ Добавить возможность удаления банлиста
+ Добавить возможность редактирования описания банлиста одним кликом
+ (front) Добавить постраничный вывод УРЛов при просмотре банлиста [layout_getbanlist]
+ (front) Добавить возможность добавления и удаления ссылок в банлисте
+ Изменить структуру БД: каждой УРЛ должен соответствовать свой уникальный ID

Глобальные задачи:
* Рефакторинг модуля class
  * Добавление комментариев к функциям
  + Добавление исключений вместо вывода ошибки в консоль
* Возможность смотреть статистику по пользователю в реальном времени (tail по access.log и rejik.log)
* Возможность смотреть cache.log и rejik.err с подсветкой синтаксиса
* Планировщик, через который можно заблокировать пользователя через некоторое время.
* Статистика:
  - С каких IP выходил пользователь
  - Какие пользователи выходили с IP
  - Статистика посещений по дням и по часам
  - Диаграмма самых посещаемых сайтов
* мониторинг размеров access.log и rejik.log и автоматический ротейт.




JSON API:

banlist.getURLlist		api->banlist_geturllist		rjk->banlist_get_urls
banlist.addURL			api->banlist_addurl			rjk->banlist_banlist_add_url
banlist.removeURL		api->banlist_removeurl		rjk->banlist_remove_url
banlist.cahngeURL		api->banlist_changeurl		rjk->banlist_banlist_change_url
													rjk->banlist_urls_count
													rjk->banlist_urls_count
													rjk->banlist_info 			
													rjk->banlist_get_users		
													rjk->banlist_create			

													rjk->banlists_get			

													rjk->user_acl_add			
													rjk->user_acl_get			
													rjk->user_acl_remove		

													is_banlist
													import_db